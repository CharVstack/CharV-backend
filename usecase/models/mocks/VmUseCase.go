// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CharVstack/CharV-backend/usecase/models (interfaces: VmUseCase)

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	entity "github.com/CharVstack/CharV-backend/entity"
	models "github.com/CharVstack/CharV-backend/usecase/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockVmUseCase is a mock of VmUseCase interface.
type MockVmUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVmUseCaseMockRecorder
}

// MockVmUseCaseMockRecorder is the mock recorder for MockVmUseCase.
type MockVmUseCaseMockRecorder struct {
	mock *MockVmUseCase
}

// NewMockVmUseCase creates a new mock instance.
func NewMockVmUseCase(ctrl *gomock.Controller) *MockVmUseCase {
	mock := &MockVmUseCase{ctrl: ctrl}
	mock.recorder = &MockVmUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmUseCase) EXPECT() *MockVmUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVmUseCase) Create(arg0 entity.VmCore) (entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVmUseCaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVmUseCase)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockVmUseCase) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVmUseCaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVmUseCase)(nil).Delete), arg0)
}

// GetPower mocks base method.
func (m *MockVmUseCase) GetPower(arg0 uuid.UUID) models.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPower", arg0)
	ret0, _ := ret[0].(models.State)
	return ret0
}

// GetPower indicates an expected call of GetPower.
func (mr *MockVmUseCaseMockRecorder) GetPower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPower", reflect.TypeOf((*MockVmUseCase)(nil).GetPower), arg0)
}

// ReadAll mocks base method.
func (m *MockVmUseCase) ReadAll() ([]entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockVmUseCaseMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockVmUseCase)(nil).ReadAll))
}

// ReadById mocks base method.
func (m *MockVmUseCase) ReadById(arg0 uuid.UUID) (entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadById", arg0)
	ret0, _ := ret[0].(entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadById indicates an expected call of ReadById.
func (mr *MockVmUseCaseMockRecorder) ReadById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadById", reflect.TypeOf((*MockVmUseCase)(nil).ReadById), arg0)
}

// Restart mocks base method.
func (m *MockVmUseCase) Restart(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockVmUseCaseMockRecorder) Restart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVmUseCase)(nil).Restart), arg0)
}

// Shutdown mocks base method.
func (m *MockVmUseCase) Shutdown(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockVmUseCaseMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockVmUseCase)(nil).Shutdown), arg0)
}

// Start mocks base method.
func (m *MockVmUseCase) Start(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVmUseCaseMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVmUseCase)(nil).Start), arg0)
}

// Update mocks base method.
func (m *MockVmUseCase) Update(arg0 uuid.UUID, arg1 entity.Vm) (entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVmUseCaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVmUseCase)(nil).Update), arg0, arg1)
}
