// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CharVstack/CharV-backend/usecase/models (interfaces: HostUseCase)

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	entity "github.com/CharVstack/CharV-backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockHostUseCase is a mock of HostUseCase interface.
type MockHostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockHostUseCaseMockRecorder
}

// MockHostUseCaseMockRecorder is the mock recorder for MockHostUseCase.
type MockHostUseCaseMockRecorder struct {
	mock *MockHostUseCase
}

// NewMockHostUseCase creates a new mock instance.
func NewMockHostUseCase(ctrl *gomock.Controller) *MockHostUseCase {
	mock := &MockHostUseCase{ctrl: ctrl}
	mock.recorder = &MockHostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostUseCase) EXPECT() *MockHostUseCaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHostUseCase) Get() (entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHostUseCaseMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHostUseCase)(nil).Get))
}
