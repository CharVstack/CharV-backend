// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CharVstack/CharV-backend/usecase/models (interfaces: StorageAccess)

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	models "github.com/CharVstack/CharV-backend/usecase/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageAccess is a mock of StorageAccess interface.
type MockStorageAccess struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccessMockRecorder
}

// MockStorageAccessMockRecorder is the mock recorder for MockStorageAccess.
type MockStorageAccessMockRecorder struct {
	mock *MockStorageAccess
}

// NewMockStorageAccess creates a new mock instance.
func NewMockStorageAccess(ctrl *gomock.Controller) *MockStorageAccess {
	mock := &MockStorageAccess{ctrl: ctrl}
	mock.recorder = &MockStorageAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAccess) EXPECT() *MockStorageAccessMockRecorder {
	return m.recorder
}

// Browse mocks base method.
func (m *MockStorageAccess) Browse() ([]models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Browse")
	ret0, _ := ret[0].([]models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Browse indicates an expected call of Browse.
func (mr *MockStorageAccessMockRecorder) Browse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Browse", reflect.TypeOf((*MockStorageAccess)(nil).Browse))
}

// Read mocks base method.
func (m *MockStorageAccess) Read(arg0 string) (models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStorageAccessMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageAccess)(nil).Read), arg0)
}
