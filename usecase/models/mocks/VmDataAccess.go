// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CharVstack/CharV-backend/usecase/models (interfaces: VmDataAccess)

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	entity "github.com/CharVstack/CharV-backend/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockVmDataAccess is a mock of VmDataAccess interface.
type MockVmDataAccess struct {
	ctrl     *gomock.Controller
	recorder *MockVmDataAccessMockRecorder
}

// MockVmDataAccessMockRecorder is the mock recorder for MockVmDataAccess.
type MockVmDataAccessMockRecorder struct {
	mock *MockVmDataAccess
}

// NewMockVmDataAccess creates a new mock instance.
func NewMockVmDataAccess(ctrl *gomock.Controller) *MockVmDataAccess {
	mock := &MockVmDataAccess{ctrl: ctrl}
	mock.recorder = &MockVmDataAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmDataAccess) EXPECT() *MockVmDataAccessMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVmDataAccess) Add(arg0 entity.Vm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockVmDataAccessMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVmDataAccess)(nil).Add), arg0)
}

// Browse mocks base method.
func (m *MockVmDataAccess) Browse() ([]entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Browse")
	ret0, _ := ret[0].([]entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Browse indicates an expected call of Browse.
func (mr *MockVmDataAccessMockRecorder) Browse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Browse", reflect.TypeOf((*MockVmDataAccess)(nil).Browse))
}

// Delete mocks base method.
func (m *MockVmDataAccess) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVmDataAccessMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVmDataAccess)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockVmDataAccess) Edit(arg0 uuid.UUID, arg1 entity.VmCore) (entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1)
	ret0, _ := ret[0].(entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockVmDataAccessMockRecorder) Edit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockVmDataAccess)(nil).Edit), arg0, arg1)
}

// Read mocks base method.
func (m *MockVmDataAccess) Read(arg0 uuid.UUID) (entity.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(entity.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockVmDataAccessMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVmDataAccess)(nil).Read), arg0)
}
