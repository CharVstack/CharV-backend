// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPowerAction(c *gin.Context, vmId openapi_types.UUID, params PostApiV1VmsVmIdPowerActionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPowerAction operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPowerAction(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1VmsVmIdPowerActionParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPowerAction(c, vmId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPowerAction)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MJn8NwAA//9FA+B2ciIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
