// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JBcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
