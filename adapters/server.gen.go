// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPowerAction(c *gin.Context, vmId openapi_types.UUID, params PostApiV1VmsVmIdPowerActionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPowerAction operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPowerAction(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1VmsVmIdPowerActionParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPowerAction(c, vmId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPowerAction)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p6noYDb7dwAAAP//Fp6sPJYiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
