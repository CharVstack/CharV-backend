// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//6HAJcaoaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
