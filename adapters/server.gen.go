// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)

	// (DELETE /api/v1/vms/{vmId})
	DeleteApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// DeleteApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPower(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.DELETE(options.BaseURL+"/api/v1/vms/:vmId", wrapper.DeleteApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPower)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xabY/bxhH+K8K2HymLpKjXb5c7wz60uhzOOfVDYBxW5Eqij28hlzqfBQGWBCNu7CKG",
	"izoIHLRNEbhBXRxSJGjTpumfoU91/kWxL3wTKYk6OGgQ5BtFLmdnnnlmdmaoMVBt07EtZGEPtMfARe/5",
	"yMNv2ZqO6I1DiNXhsaNBjLqdI/aU3FdtCyOLXkLHMXQVYt22Knc82yL30F1oOgYTwa/LEvkxgoaPqADH",
	"B21JFoCJTNs9B21FbNUFYEETgTbwe76FfVm8JipgMpkIwFOHyITkRce1HeRirh8VMwb43CGv6RZGA+SC",
	"SSx2DPq2a0JMhOoWritAyFnNto3keNjVrQEgGxNEdBdpoP0uWxWJFujmtyNxdu8OUjFTV0Oe6uoOwQS0",
	"QbezmD+4/OPfgunF4vlXi2dfkC0PbQ/vDqE1QN2Od2ifIfcWhtj33jrvdva1q0F9nV2X0lBDlevhYeji",
	"9XiGa8fg5y7qgzb4WSVmSIW95VW6JlV4hy72MjhxIcWgCaYX3z3/ZvGvJ//94O+LB4+C2dPFb3/z6ttP",
	"IoxcBDE6QGffA/+UmCeyqDSX6Sf/WOgXTC9effvJ4uETLtNzbMtjFtxAeMcwuh3vl7qHZVE84g/fCMgj",
	"0wPtd2OwNTTSVfaCpnun9Bm7B9rsTq4LBODYtkGWoD70DRxj+J5qn8lgcnuy7EgTYahBDJnu+skIuR5D",
	"YyQBAegaaAMFibCqKs1yX2lWy4osw3KvJotluSmLsthQUV+RY+9wjcBESCSvLQzqI8124Xa2NKWWXMwW",
	"JDaqqIlQWZW1VlnpidVyU6tL5WofVRGCGhI1LWELV2Zyey27qfvGQMeIXaxPCUQ8NwW6LjzP8JeIK8LX",
	"ywefB9MXwfSi23n19f3XL/5MJN9A+Kb95hk6tHk+YYGs2j49CZsCcJCrUtFVOR3PLkKgXZVqiihS90QL",
	"a9VrNaXRqEsNpdqQqi1FANjG0ABtqV6T681Gvd6QBeB7BI5mU2k1GnJNUYgDsO3CAToh1GARw/0Uk8SB",
	"eAjaoDKCbsXQBxVD7410F1d0Ew6QB4gMcnqANtjZfWe/ex3wzU88/R4CbUkU67WqWK8psthkOvAnRNW6",
	"2JJqSq1O+bCGECFa64hAvJRxPX2xiO+D+fNg9s9g/pCclfTQ5M7vdtjB+OZTVPI0+FEkqA0xXSSSM5Fb",
	"8KDZ14Lpy8snD1+//1Uw/TiYPQpLn8iLtHD4vlx54hDpVJiBoMV+ntj9Pmhj10csSIgNR8cHB/sHNzZi",
	"FQssUA7tW307BzouY8tqKIYtVYL/FAQ/9CBgFX4w/V0wexxM/5AMgKVy9icv/oC9+OyL1y8+ZEVzji8j",
	"ragiu6x4WH2S7R4e8zeF5QaCFxx5PURUWCSaCM32ewaKnWL5Zo+sXrKSi41lEJt1bJBXiLbLCAjgbjlB",
	"sAn5jeHAi8/uiQD2YkaljWD8Klgo7pHFm0pFKjGhc7h1nt4eth1DHwwpUJRs5wO9en6vfqoPW6JBZe9x",
	"DZf05uEwBsjyzWhfAaiaa5tAAL51atlnyU42bM1W9mxh/OQ8YDfizULpAg+t7C75DSDdgK8N4zwFFjOi",
	"CFLYOO2fea2eC51mn+53k5d4uX3uOr8SWqUK5XWLO2xVtvQtSKJb7K1DgsQmLqmU71HXnN4wARu1vBhs",
	"xshRzKbUOreR1aAbdiKzV2eBYP5pMP9TMP/LilzAOotiE4NtckPUhhQTzfqTImuXgGa7cAECMyc3A3VC",
	"X1whCXUSh83S6Cp59OSEn75kla9rYFPE0SVJwSkruCbFOOM6hnR2LmqycXfARmZJEq8jzuPF42kw/Yz/",
	"nP81mP87mH0dzD8iF/OXcae0TKjVKYo2kzkPwiYyTlJRN3n96Ojto9xMmOwzi1Nsixfy02Bi26REbl1k",
	"S8JjScCvRL6umXXUq28uFvMvg/nvg9k/gvmXwezp608/J80PCfX3g/nL7Jm/amiYKNnWnqB82dZjxmSh",
	"tj4783XbjyajkEhNKWPTEt7omls5gRRu1AWp0XOCqWy6LQBv6GONnasu6tk2phcewunNU2KWWZ0fwmJz",
	"aI7uabokuapPMUh2ftlDc7kHjVDs2TZ5FkZcqioIW1MBHB/84uDtXx0AAdy6efzOHrncWCIs7xlukDWd",
	"6lwsdZ05g2Hf9K2BJls1XpTr3OSoqhxCt+thqJ6Wdw73gQDiLkC6JhJLbQdZ0NFBG1SviddEHqgUqQp0",
	"9MpIqoTzpQHCazIi/5gye3r54bPL/3zEBg2AbuDSnmmfKH0D4R1H70r8WE8NvWVRXBUD0bpKzsSR1v2+",
	"aUISc2SHEiwNedmQzhUTITKKT1FzbcqMOota1TW9qxqVP+7PMc0wSt2OVzL0lIE8Dh3uqswAY/Y07Jpy",
	"DSA9cMqC8IPj+WrlE98kKys+CU2uAsaafjwNB1tUgiULnZW6nWU00s6ujEfmvjZh4BiIRXcOTJe//uC7",
	"jz9bAdMefTMEqmvua1l3K1nBB3Zpl48RaJTmk+7+o+D+A0q67UJppSbFiJc3vcqLqCzAJFW40EQYuWw8",
	"rhM7+DnPRwajULMwGfKJXzQ82FT53aYJSR3muSvCKZzu5HObvJ5BaluC531xvxq91w8O09Czdbno59K7",
	"Ek1GczmW912XcWwTu+jhdHWKrZgvZ3lGF5Zu0dPx/0W3VTl01Sfxdck0jd1VsurGPyNMtk5BqSRK5Sdw",
	"970M0ybRjXEMNP3kyn/R4zXxm6JKsMyrW+SWhBxV7Q3uNGQNTCb/CwAA//+L3eAn7iIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
