// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
