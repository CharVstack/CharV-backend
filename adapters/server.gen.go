// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPowerAction(c *gin.Context, vmId openapi_types.UUID, params PostApiV1VmsVmIdPowerActionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPowerAction operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPowerAction(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1VmsVmIdPowerActionParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPowerAction(c, vmId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPowerAction)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/TcAAP//zSKfuWAiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
