// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPowerAction(c *gin.Context, vmId openapi_types.UUID, params PostApiV1VmsVmIdPowerActionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPowerAction operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPowerAction(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1VmsVmIdPowerActionParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPowerAction(c, vmId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPowerAction)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZa2/b1t3/KsJ5npeURVHU9Z3rFImwyTWcmntRGMYReSQxJnkY8lCOagiILAQNlgwN",
	"MizFkGJbhyErliHo0GLr1nVfhrGWfYvhXHgTqYuNFOuGvhPJc/7X3/+qc6Bj28UOcogPOufAQ3cD5JN3",
	"sGEi9uIAEn105BqQIK13yL/S9zp2CHLYT+i6lqlDYmKncsfHDn2H7kHbtTgJ8btcpQ9jaAWIEXAD0Kkq",
	"ErCRjb0J6KhyuyEBB9oIdEDQDxwSKPKOrILpdCoBXx8hG9KLrodd5BEhHyNzDsjEpddMh6Ah8sA0IVv0",
	"jTOJv/jEM50hoGyo/qaHDND5gJ+KCUmM1bEUXcL9O0gnXDgD+bpnutQCoAO03mL+4PI3fwpnrxbPv1o8",
	"+4KyPMA+2fMQJGgfnX0HllQTjRVZbS0bUvnvNGQ4e/X6208XD58Imr6LHZ/LexORXcvSev6PTZ8osnwo",
	"Pr4Vk45tH3Q+SExroLGp8wuG6Z+yb/wd6PA3hQaXgIuxRY+gAQwsAmKl7+r4TAHT4+my22xEoAEJ5LKb",
	"J2Pk+dwa4yqQgGmADlCRDGu62ioP1FatrCoKLPfrilxWWoqsyE0dDVQl8Y6QCEylVNBdQaEBMrAHr6ZL",
	"q9pWttMFyc0aaiFU1hWjXVb7cq3cMhrVcm2AaghBA8mGkdJFCDM9Xotl5r5zYBLEf/y/hwagA/6vkiS7",
	"Cr/rVzSbkheqQM+Dkxx+Kblt8Hr54PNw9iKcvdJ6r7++/+bF7ynlm4jcwm8foSMssgcPWx0HLIO3JOAi",
	"T2eka0omegceQqBTq9ZVWWbuiQ/Wazt1tdlsVJtqrVmttVUJEEygBTrVRl1ptJqNRlORQOBTc7RaarvZ",
	"VOqqSh1AsAeH6IRCg0eM8FMCEheSEeiAyhh6FcscViyzPzY9UjFtOEQ+oDQgCXzQAbt773e1d4FgfuKb",
	"HyLQqcpyo16TG3VVkVtcBvGFitqQ29W6Wm8wPKwBRGStdUCgXsq5nl3cxvfh/Hl48ddw/pBmfZb+hfO1",
	"3jsTrdc13n6KSuf+/4kEtSGmt4nkXORuWWi6Rjh7efnk4ZuPvgpnvwwvHkVFPPbiAT5D3nflyhOXUmfE",
	"LAQd/niCBwPQIV6AeJBQHQ6P9ve7+zc32iohuN5iTKuuM8AFphM0tq7U/3r+zeJvTxKzZVrHH4Lg+x4E",
	"vFcNZ78ILx6Hs1+nA2Cpef3Bi99jLz774s2Lj3nTXODLWComyB5vHlZXsr2DI3FTWh4XRMNRNBXEjcU5",
	"GGDPhoR6BQd9CyVOcQK7T08vaSnIJjSoziax6BUq7bIFJHCvnALYlD4TOPST2j2VwI0EUVklOL62bBRv",
	"0MObWkVGMSVzxLpIbp9g1zKHI2YoBrbJ0KxNPmycmqO2bDHaN4SES3KLcDgHyAnsmK8EdMPDNpBA4Jw6",
	"+MxJISYazVbObFH8FHzgLxJmEXVJhFaeS/EAyBiIs1GcZ4zFldjGUsQ6HZz57b4H3daA8bslWrzCqXad",
	"XymsMo3yusM9firf+m4Jotv81gG1xCYs6Qzv8dScZZgyG9N8O7NZY1e1W9X2BCOnyRj2YrVXZ4Fw/lk4",
	"/204/8OKXMAni1SwB6ZDGmoi0zVzQzyGbEeazyfbnF0yNOciCEhcncIM1It8cY0k1EsVm6z5MqWnIPzM",
	"Ja0C0wCbIo4dSRPOaCEk2Q4znmtVzyayoVj3hj5jlAbxOuA8XjyehbPficf5H8P538OLr8P5J/TH/GUy",
	"KS0DanWKYsNkwYdoiEySVDxNvnt4+N5hYSZMz5nbQ+wKF4rTYIptmqLQLtYl5bG0wa8FPs3OO+r1N68W",
	"8y/D+a/Ci7+E8y/Di6dvPvucDj801D8K5y/zNX/VijDVsq2toOLYhqViui1bn4vFuasvIuMAyOwkE0VS",
	"ttfsK5mctmnM4MlklS9KyzNeLHcfY/otQnSm6kajnwSO9n+0/95P9oEEbt86ev8G/bmxBC/zjBhkNE1k",
	"3i41nLnD0cAOnKGhOHXR9JpC5bhrG0FP8wnUT8u7B10ggaTLru7IVFPsIge6JuiA2o68I4tAYJaqQNes",
	"jKuVaH8zRGRNxhFr94unlx8/u/zHJ3yQB4yBx2aSLhX6JiK7rqlVRdnMLJUVWV6FuvhcpWCjx/rqwLYh",
	"xTTlUIKlkSjL2VicSrFSYktZqFNulbitVprtX1ep4nV6gWqWVdJ6fskyMwoK5LvCVbkFwcXTaCopVIDO",
	"mBkNoj+iJquFT/1XVVnxB8v0OsZYM+9mzcEPlWDJQWclrbdsjayzK+dju2tMV/v8/qPw/gPm86shWbN9",
	"ze4a1/V70XKmCNB5/WiketBGBHl8+2tSPUQZExPxOJIsykVioRXPxpsam2OWD/RREahiO0XLi2Jo0es5",
	"S10VX0V/hF4PXev3YlnT83OF1i9EVyVe/BViLLWo++dP/7x48CjG2CZ0sdpwfYitWJ/mccYOlm6z4vSf",
	"gtuqFJYz3eLnP3v97adrc1lsu12dESpW4m6AWBsitIDR2UTuqA3wCfRo2vVHATH4FO6hPsailiFS1Asc",
	"5/ym5hXcx6U9scpbynIj6AxRyjOBn8PiNH5xnriC/econlj9Sz0zEalgRY2F0q4iV9f7wztNxQDT6b8D",
	"AAD//69MsiynIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
