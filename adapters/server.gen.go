// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
