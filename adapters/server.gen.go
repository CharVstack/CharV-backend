// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)

	// (DELETE /api/v1/vms/{vmId})
	DeleteApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// DeleteApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPower(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.DELETE(options.BaseURL+"/api/v1/vms/:vmId", wrapper.DeleteApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPower)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
