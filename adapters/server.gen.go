// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPowerAction(c *gin.Context, vmId openapi_types.UUID, params PostApiV1VmsVmIdPowerActionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPowerAction operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPowerAction(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1VmsVmIdPowerActionParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", c.Request.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter action: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPowerAction(c, vmId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPowerAction)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ov13AAAA//8QMDJltiAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
