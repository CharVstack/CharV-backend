// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter vmId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fykXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
