// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId openapi_types.UUID)
	// Get Power State
	// (GET /api/v1/vms/{vmId}/power)
	GetApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
	// Change Power Status
	// (POST /api/v1/vms/{vmId}/power)
	PostApiV1VmsVmIdPower(c *gin.Context, vmId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GetApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmIdPower(c, vmId)
}

// PostApiV1VmsVmIdPower operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1VmsVmIdPower(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1VmsVmIdPower(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.GetApiV1VmsVmIdPower)

	router.POST(options.BaseURL+"/api/v1/vms/:vmId/power", wrapper.PostApiV1VmsVmIdPower)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
