// Package adapters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package adapters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a host
	// (GET /api/v1/host)
	GetApiV1Host(c *gin.Context)
	// Get all VMs list
	// (GET /api/v1/vms)
	GetApiV1Vms(c *gin.Context)
	// Create a new VM
	// (POST /api/v1/vms)
	PostApiV1Vms(c *gin.Context)
	// Get a VM
	// (GET /api/v1/vms/{vmId})
	GetApiV1VmsVmId(c *gin.Context, vmId string)
	// Update a VM
	// (PATCH /api/v1/vms/{vmId})
	PatchApiV1VmsVmId(c *gin.Context, vmId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Host operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Host(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Host(c)
}

// GetApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1Vms(c)
}

// PostApiV1Vms operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Vms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostApiV1Vms(c)
}

// GetApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiV1VmsVmId(c, vmId)
}

// PatchApiV1VmsVmId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1VmsVmId(c *gin.Context) {

	var err error

	// ------------- Path parameter "vmId" -------------
	var vmId string

	err = runtime.BindStyledParameter("simple", false, "vmId", c.Param("vmId"), &vmId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter vmId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchApiV1VmsVmId(c, vmId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/host", wrapper.GetApiV1Host)

	router.GET(options.BaseURL+"/api/v1/vms", wrapper.GetApiV1Vms)

	router.POST(options.BaseURL+"/api/v1/vms", wrapper.PostApiV1Vms)

	router.GET(options.BaseURL+"/api/v1/vms/:vmId", wrapper.GetApiV1VmsVmId)

	router.PATCH(options.BaseURL+"/api/v1/vms/:vmId", wrapper.PatchApiV1VmsVmId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//Y2eLBg4eAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
