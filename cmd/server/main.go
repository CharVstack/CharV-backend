/*
 * CharVstack-API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"errors"
	"flag"
	"github.com/CharVstack/CharV-backend/infrastructure/disk"
	"github.com/CharVstack/CharV-backend/infrastructure/file"
	"github.com/CharVstack/CharV-backend/infrastructure/system"
	"github.com/CharVstack/CharV-backend/infrastructure/utils"
	"github.com/CharVstack/CharV-backend/interfaces"
	"github.com/CharVstack/CharV-backend/usecase/host"
	"github.com/CharVstack/CharV-backend/usecase/vm/qemu"
	"io/fs"
	"log"
	"os"
	"time"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/CharVstack/CharV-backend/api"
	"github.com/CharVstack/CharV-backend/middleware"
	oapiMiddleware "github.com/deepmap/oapi-codegen/pkg/gin-middleware"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

var production bool

func init() {
	var (
		configPath = flag.String("c", "/etc/charv/backend.conf", "backend config file path")
	)
	flag.Parse()

	err := godotenv.Load(*configPath)
	if err != nil {
		log.Fatal(err.Error())
	}

	imagesDir := os.Getenv("IMAGES_DIR")
	_, err = os.ReadDir(imagesDir)
	if err != nil && errors.Is(err, fs.ErrNotExist) {
		log.Fatal(err.Error())
	}

	guestsDir := os.Getenv("GUESTS_DIR")
	_, err = os.ReadDir(guestsDir)
	if err != nil && errors.Is(err, fs.ErrNotExist) {
		log.Fatal(err.Error())
	}

	storageDir := os.Getenv("STORAGE_POOLS_DIR")
	_, err = os.ReadDir(storageDir)
	if err != nil && errors.Is(err, fs.ErrNotExist) {
		log.Fatal(err.Error())
	}

	qmpDir := os.Getenv("QMP_DIR")
	_, err = os.ReadDir(qmpDir)
	if err != nil && errors.Is(err, fs.ErrNotExist) {
		log.Fatal(err.Error())
	}

	vncDir := os.Getenv("VNC_DIR")
	_, err = os.ReadDir(vncDir)
	if err != nil && errors.Is(err, fs.ErrNotExist) {
		log.Fatal(err.Error())
	}
}

func main() {
	var logger *zap.Logger
	if production {
		var err error

		config := zap.NewProductionConfig()
		config.Encoding = "console"
		config.EncoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder

		logger, err = config.Build()
		if err != nil {
			log.Fatal(err)
		}

		gin.SetMode(gin.ReleaseMode)
	} else {
		var err error
		logger, err = zap.NewDevelopmentConfig().Build()
		if err != nil {
			log.Fatal(err)
		}
	}

	r := gin.New()

	swagger, err := api.GetSwagger()
	if err != nil {
		log.Fatal(err.Error())
	}
	validatorOpts := oapiMiddleware.Options{
		ErrorHandler: middleware.ValidationErrorHandler,
	}

	r.Use(gin.Recovery())

	r.Use(middleware.Logger(logger))

	r.Use(cors.New(cors.Config{
		AllowOrigins: []string{
			os.Getenv("ORIGIN_URI"),
		},
		AllowMethods: []string{
			"GET",
			"POST",
			"OPTIONS",
			"DELETE",
		},
		AllowHeaders: []string{
			"Content-Type",
		},
		AllowCredentials: false,
		MaxAge:           24 * time.Hour,
	}))

	sys := system.Paths{
		Images:       os.Getenv("IMAGES_DIR"),
		Guests:       os.Getenv("GUESTS_DIR"),
		StoragePools: os.Getenv("STORAGE_POOLS_DIR"),
		QMP:          os.Getenv("QMP_DIR"),
		VNC:          os.Getenv("VNC_DIR"),
	}

	// ToDo: DI ライブラリの導入を検討する

	d1 := file.NewVmDataAccess(sys)
	d2 := file.NewStorageAccess(sys)

	stat := utils.NewHostStatAccess(&d2)
	qcow2 := disk.NewQCOW2Disk(&d2, sys)

	u1 := qemu.NewQemuUseCase(&d1, &qcow2, sys)
	u2 := host.NewHostUseCase(&stat)

	v1Handler := interfaces.NewV1Handler(&u1, &u2)

	ginServerOpts := api.GinServerOptions{
		ErrorHandler: middleware.GenericErrorHandler,
	}

	vncHandler := interfaces.NewVNCHandler(logger, os.Getenv("SOCKETS_DIR"), production, &d1)
	r.GET("/ws/vnc/:vmId", vncHandler.Handler)

	router := api.RegisterHandlersWithOptions(r, v1Handler, ginServerOpts)

	oasRouter := router.Group("/api")
	oasRouter.Use(oapiMiddleware.OapiRequestValidatorWithOptions(swagger, &validatorOpts))

	if err := router.Run(":4010"); err != nil {
		log.Fatal(err.Error())
	}
}
